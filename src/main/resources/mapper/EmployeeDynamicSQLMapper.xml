<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.roy.mapper.EmployeeDynamicSQLMapper">

    <!--mysql下批量保存：可以使用foreach遍历 ,values(),(),()-->
    <!--<insert id="addEmps">
        insert into tbl_employeeplus(last_name, email, gender, d_id)
        values
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.lastName}, #{emp.email,jdbcType=VARCHAR}, #{emp.gender}, #{emp.dept.id})
        </foreach>
    </insert>-->
    <!--&allowMultiQueries=true 需要设置这个数据库连接属性
    一条sql语句中，允许使用;来分隔多条查询，默认为假
    这种分号分隔多个sql可以用于其他的批量操作
    -->
    <!--<insert id="addEmps">
        <foreach collection="emps" item="emp" separator=";">
            insert into tbl_employeeplus(last_name, email, gender, d_id)
            values
            (#{emp.lastName}, #{emp.email,jdbcType=VARCHAR}, #{emp.gender}, #{emp.dept.id})
        </foreach>
    </insert>-->

    <!--Oracle不支持values(),(),()
        Oracle支持的批量方式
        1.多个insert语句放在begin和end之间
        2.利用中间表批量插入
    -->
    <insert id="addEmps">
        begin
            <foreach collection="emps" item="emp" separator=";">
                insert into tbl_employeeplus(id,last_name, email, gender, d_id)
                values
                (employees_seq.nextval, #{emp.lastName}, #{emp.email,jdbcType=VARCHAR}, #{emp.gender}, #{emp.dept.id})
            </foreach>
        end;
    </insert>


    <update id="updateEmp">
        update tbl_employee
        <!--set标签可以去除一些多余的逗号-->
        <set>
            <if test="lastName != null and lastName != ''">
                last_name = #{lastName},
            </if>
            <if test="email != null and email != ''">
                email = #{email},
            </if>
            <if test="gender != null and gender != ''">
                gender = #{gender},
            </if>
        </set>
        where id = #{id}
        <!--update tbl_employee
        &lt;!&ndash;利用trim标签来做更新&ndash;&gt;
        <trim prefix="set" suffixOverrides=",">
            <if test="lastName != null and lastName != ''">
                last_name = #{lastName},
            </if>
            <if test="email != null and email != ''">
                email = #{email},
            </if>
            <if test="gender != null and gender != ''">
                gender = #{gender},
            </if>
        </trim>
        where id = #{id}-->
    </update>

    <!--collection:要遍历的集合
    separator:每个元素之间的分隔符
    index:遍历list的时候就是索引值，遍历map的时候，index表示map的key，item就是map的值
    -->
    <select id="getEmpsByConditionForeach" resultType="com.roy.bean.Employee">
        select * from tbl_employee where id in
        <foreach collection="ids" item="item" separator="," open="(" close=")" index="" >
            #{item}
        </foreach>

    </select>


    <!--test表达式
    OGNL表达式参照ppt文档,从参数中取值判断
    遇见特殊字符写转义字符
    1.在where后面加上1=1，以后的条件都加and
    2.使用where标签将所有的查询条件包括起来，mybatis会将where标签中拼装中的sql多出来的and或者or去掉
    3.where只会去掉第一个多出来的and或者or
    -->
    <select id="getEmpByConditionIf" resultType="com.roy.bean.Employee">
        select * from tbl_employee
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="lastName != null &amp;&amp; lastName != &quot;&quot;">
                and last_name like #{lastName}
            </if>
            <if test="email != null and email.trim()!= ''">
                and email = #{email}
            </if>
            <!--OGNL会进行字符串和数字的转换判断 "0" == 0-->
            <if test="gender == 0 or gender == 1">
                and gender = #{gender}
            </if>
        </where>

    </select>


    <!--后面多出的and或者or where标签不能解决
    prefix前缀，trim标签体中是整个字符串拼串后的结果，prefix给整体加一个前缀
    prefixOverrides前缀覆盖，去掉整个字符串前面多余的字符
    同理可得suffix和suffixOverrides
    -->
    <select id="getEmpsByConditionTrim" resultType="com.roy.bean.Employee">
        select * from tbl_employee
        <trim prefix="where" prefixOverrides="" suffix="" suffixOverrides="and">
            <if test="id != null">
                id = #{id} and
            </if>
            <if test="lastName != null &amp;&amp; lastName != &quot;&quot;">
                last_name like #{lastName} and
            </if>
            <if test="email != null and email.trim()!= ''">
                email = #{email} and
            </if>
            <!--OGNL会进行字符串和数字的转换判断 "0" == 0-->
            <if test="gender == 0 or gender == 1">
                gender = #{gender}
            </if>
        </trim>
    </select>

    <!--where标签封装查询标签，set标签封装修改条件-->
    <select id="getEmpsByConditionChoose" resultType="com.roy.bean.Employee">
        select * from tbl_employee
        <where>
            <choose>
                <when test="id != null">
                    id = #{id}
                </when>
                <when test="lastName != null &amp;&amp; lastName != &quot;&quot;">
                    and last_name like #{lastName}
                </when>
                <when test="email != null and email.trim()!= ''">
                    and email = #{email}
                </when>
                <otherwise>
                    1 = 1
                </otherwise>
            </choose>
        </where>
    </select>



</mapper>